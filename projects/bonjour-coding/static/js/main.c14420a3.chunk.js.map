{"version":3,"sources":["logo.svg","components/Form.js","components/Menu.js","localstorage/terms.js","components/termsdata.js","components/termsdatalocal.js","page/home.js","page/about.js","page/terminology.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","Nav","NavItem","NavLink","href","to","terms","Component","GetLocalPosts","props","state","this","pathname","term","ListGroup","map","ListGroupItem","key","id","name","Home","class","About","Terminology","console","log","location","termid","params","match","setState","React","Path","useParams","Boolean","window","hostname","ReactDOM","render","Menu","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,iMC0B5BC,I,+BCGAA,MAxBf,WACE,OAEM,kBAACC,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,KAAK,KAAd,IAAmB,kBAAC,IAAD,CAAMC,GAAG,SAAT,QAAnB,OAGJ,kBAACH,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,KAAK,KAAd,IAAmB,kBAAC,IAAD,CAAMC,GAAG,UAAT,SAAnB,OAGJ,kBAACH,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,KAAK,KAAd,IAAmB,kBAAC,IAAD,CAAMC,GAAG,SAAT,SAAnB,Q,wCCMDC,GCvBgBC,YDFjB,CACV,CACI,GAAO,EACP,KAAS,WACT,YAAgB,yCAEpB,CACI,GAAO,EACP,KAAS,YACT,YAAgB,gCAEpB,CACI,GAAO,EACP,KAAS,gBACT,YAAgB,oBAGpB,CACI,GAAO,EACP,KAAS,WACT,YAAgB,4F,gBEyBPC,E,YAtCb,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTJ,MAAOA,GAHG,E,sEAMR,IACCA,EAASK,KAAKD,MAAdJ,MACP,OACI,6BAEI,kBAAC,IAAD,CAAMD,GAAI,CACVO,SAAU,eACVF,MAAO,CACHG,KAAM,UAHV,kBAOA,kBAACC,EAAA,EAAD,KAEIR,EAAMS,KAAI,SAAAF,GAAI,OACV,kBAACG,EAAA,EAAD,CAAeC,IAAKJ,EAAKK,IAAzB,IAAgCL,EAAKK,GAArC,MAA4CL,EAAKM,KAAjD,KAKI,kBAAC,IAAD,CAAMd,GAAI,CAAEO,SAAS,gBAAD,OAAkBC,EAAKK,MAA3C,qB,GA3BAX,a,MC2C5B,IAEea,EAzCf,WACE,OAEE,6BACE,gDAGA,mOAIA,0WAIA,uBAAGC,MAAM,oBAAT,iOAGA,+CACE,kBAAC,EAAD,QClBOC,EARD,SAACb,GACb,OACE,uCC+CWc,E,YA1CX,WAAYd,GAAQ,IAAD,6BAEf,4CAAMA,IAENe,QAAQC,IAAI,EAAKhB,MAAMiB,UAGvB,EAAKhB,MAAQ,CAETiB,OAAQ,MATG,E,iFAaE,IAGAC,EAAajB,KAAKF,MAA3BoB,MAASD,OAEjBJ,QAAQC,IAAI,WAAaG,EAAOV,IAChCP,KAAKmB,SAAS,CAAEH,OAAQC,EAAOV,O,+BAW/B,OACI,gD,GAjCca,IAAMxB,W,QC2DhC,SAASyB,EAAKvB,GAEZe,QAAQC,IAAIhB,GAFO,IAIbS,EAAOe,cAAPf,GAEN,OACE,6BACE,mCAASA,IC/DKgB,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASP,MACvB,2D,MCVNQ,IAASC,OAAO,mBFaD,WACb,OACE,kBAAC,IAAD,KACE,yBAAKjB,MAAM,mBAIT,kBAACkB,EAAD,MASA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAACR,EAAD,OAKF,kBAAC,IAAD,CAAOQ,KAAK,mBAAmBC,UAAWlB,GAA1C,KAEA,kBAAC,IAAD,CAAOiB,KAAK,KACV,kBAAC,EAAD,YE1CI,MAASE,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c14420a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../App.css';\r\n\r\nfunction Form() {\r\n  return (\r\n\r\n    <div>\r\n      <h1>  Formulaire de terminologie </h1> \r\n\r\n      <form> \r\n\r\n\r\n        <input value=\"\" placeholder = \"Term name\" />\r\n        <input value=\"\" placeholder = \"Description\" />\r\n\r\n\r\n    \r\n      </form>  \r\n\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../App.css';\r\nimport {Link} from 'react-router-dom';\r\nimport {  Nav, NavItem, NavLink } from 'reactstrap';\r\nfunction Form() {\r\n  return (\r\n        \r\n        <Nav>\r\n\r\n            <NavItem>\r\n                <NavLink href=\"#\"> <Link to=\"/home\">Home</Link>  </NavLink>\r\n            </NavItem>\r\n\r\n            <NavItem>\r\n                <NavLink href=\"#\"> <Link to=\"/about\">About</Link>  </NavLink>\r\n            </NavItem>\r\n\r\n            <NavItem>\r\n                <NavLink href=\"#\"> <Link to=\"/path\">Paths</Link> </NavLink>\r\n            </NavItem>\r\n\r\n\r\n         \r\n        </Nav>\r\n\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","const terms = [\r\n    {\r\n        \"id\" : 1,\r\n        \"name\" : \"function\",\r\n        \"description\" : \"There are some great matches and good\"\r\n    },\r\n    {\r\n        \"id\" : 2,\r\n        \"name\" : \"framework\",\r\n        \"description\" : \"There are some great matches\"\r\n    },\r\n    {\r\n        \"id\" : 3,\r\n        \"name\" : \"instanciation\",\r\n        \"description\" : \"It's a bad hobby\"\r\n    },\r\n\r\n    {\r\n        \"id\" : 4,\r\n        \"name\" : \"paradigm\",\r\n        \"description\" : \" A paradigm is a way of thinking or a way of doing something. A paradigm is a mindset.\"\r\n    }\r\n\r\n   \r\n];\r\nexport default terms;","import React, { Component } from 'react'\r\n\r\nexport class termsdata extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            error : null,\r\n            isLoaded : false,\r\n            posts : []        \r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        // I will use fake api from jsonplaceholder website\r\n        // this return 100 posts \r\n        fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n        .then( response => response.json())\r\n        .then(\r\n            // handle the result\r\n            (result) => {\r\n                this.setState({\r\n                    isLoaded : true,\r\n                    posts : result\r\n                });\r\n            },\r\n            // Handle error \r\n            (error) => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    error\r\n                })\r\n            },\r\n        )\r\n    }\r\n    \r\n    \r\n    render() {\r\n\r\n        const {error, isLoaded, posts} = this.state;\r\n        if(error){\r\n            return <div>Error in loading</div>\r\n        }else if (!isLoaded) {\r\n            return <div>Loading ...</div>\r\n        }else{\r\n\r\n            return(\r\n                <div>\r\n                    <ol className=\"item\">\r\n                    {\r\n                    posts.map(post => (\r\n                        <li key={post.id} align=\"start\">\r\n                                    <div>\r\n                                        <p className=\"title\">{post.title}</p>\r\n                                        <p className=\"body\">{post.body}</p>\r\n                                    </div>\r\n                            </li>\r\n                        ))\r\n                        }\r\n                    </ol>\r\n                </div>\r\n            );\r\n        }    \r\n    }\r\n}\r\n\r\nexport default termsdata\r\n","import React, { Component } from 'react';\r\nimport terms from '../localstorage/terms';\r\nimport {ListGroup, ListGroupItem, Button } from 'reactstrap';\r\nimport {Link} from 'react-router-dom'\r\n// get posts from online api\r\n// it's return a json file\r\nclass GetLocalPosts extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {            \r\n            terms :terms            \r\n        };\r\n    }\r\n    render() {\r\n        const {terms} = this.state;\r\n        return(\r\n            <div>\r\n\r\n                <Link to={{\r\n                pathname: '/description',\r\n                state: {\r\n                    term: 'Test'\r\n                }\r\n                }}>Tyler McGinnis</Link>\r\n\r\n                <ListGroup>\r\n                {\r\n                    terms.map(term => (\r\n                        <ListGroupItem key={term.id} > {term.id} | {term.name} > \r\n\r\n                        \r\n                        \r\n\r\n                            <Link to={{ pathname: `/terminology/${term.id}` }}>  Voir </Link>\r\n\r\n                        </ListGroupItem>\r\n                        \r\n                    ))\r\n                }\r\n                </ListGroup>\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n  \r\n  export default GetLocalPosts;","import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../App.css';\r\nimport { Button } from 'reactstrap';\r\n\r\nimport ListTerms from '../components/termsdata'\r\nimport ListTermsLocal from '../components/termsdatalocal'\r\n\r\nimport '../styles/terms.css'\r\n\r\nfunction Home() {\r\n  return (\r\n\r\n    <div>\r\n      <h1> BONJOUR-CODING </h1> \r\n\r\n      \r\n      <p>\r\n      Terminology is a general word for the group of specialized words or meanings relating to a particular field, and also the study of such terms and their use, this also known as terminology science. \r\n      </p>\r\n\r\n      <p>       \r\n        Terminology is also a discipline that studies, among other things, the development of such terms and their interrelationships within a specialized domain. Terminology differs from lexicography, as it involves the study of concepts, conceptual systems and their labels (terms), whereas lexicography studies words and their meanings.\r\n      </p>\r\n      \r\n      <p class=\"font-weight-bold\" > Terms are words and compound words or multi-word expressions that in specific contexts are given specific meaningsâ€”these may deviate from the meanings the same words have in other contexts and in everyday language. </p>\r\n\r\n\r\n      <h2> List of Terms </h2>\r\n        <ListTermsLocal />\r\n\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nfunction NumberList(props) {\r\n    const numbers = props.numbers;\r\n    const listItems = numbers.map((number) =>\r\n      <li key={number.toString()}>\r\n        {number}\r\n      </li>\r\n    );\r\n    return (\r\n      <ul>{listItems}</ul>\r\n    );\r\n  }\r\n  \r\nconst numbers = [1, 2, 3, 4, 5, 9];\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Button } from 'reactstrap';\r\n\r\nconst About = (props) => {\r\n  return (\r\n    <div>\r\n      About\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport {  Container,  ListGroupItem, ListGroup, ListGroupItemHeading, ListGroupItemText, Card, CardImg} from 'reactstrap';\r\nimport {useParams,     \r\n    BrowserRouter as Router,\r\n} from \"react-router-dom\";      \r\nimport terms from '../localstorage/terms';\r\n// const Terminology = (props) => {\r\n\r\nclass Terminology extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        console.log(this.props.location);\r\n\r\n        // Don't do this!\r\n        this.state = { \r\n            //desc: props.location.term, \r\n            termid: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount () {\r\n        //const { term } = this.props.location.state.term\r\n\r\n        const { match: { params } } = this.props;\r\n\r\n        console.log(\" ID ==> \" + params.id);\r\n        this.setState({ termid: params.id });\r\n\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n\r\n        \r\n        // let { id } = useParams();\r\n\r\n        return (\r\n            <div>\r\n            Terminology \r\n\r\n\r\n            </div>\r\n\r\n    \r\n    )\r\n    };\r\n}\r\n\r\nexport default Terminology;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n//Components \nimport Form from './components/Form';\nimport Menu from './components/Menu';\n//Pages\nimport Home from './page/home' ; \nimport About from './page/about' ; \nimport Terminology from './page/terminology';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link, useParams\n} from \"react-router-dom\";\nimport { Button, Nav, NavItem, NavLink } from 'reactstrap';\n\n\nexport default function App() {\n  return (\n    <Router>\n      <div class=\"container-fluid\" >\n      \n      \n\n        <Menu />\n\n        \n\n        \n\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/path/:id\">\n            <Path />\n          </Route>\n          \n          \n\n          <Route path=\"/terminology/:id\" component={Terminology} > </Route>\n\n          <Route path=\"/\">\n            <Home />\n          </Route>\n \n\n\n\n\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\n\n\n\nfunction Path(props) {\n\n  console.log(props);\n  \n  let { id } = useParams();\n\n  return (\n    <div>\n      <h3>ID: {id}</h3>\n    </div>\n  );\n\n}\n\nfunction Child() {\n  // We can use the `useParams` hook here to access\n  // the dynamic pieces of the URL.\n  let { id } = useParams();\n\n  return (\n    <div>\n      <h3>ID: {id}</h3>\n    </div>\n  );\n}\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}